"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[680],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),d=n,m=c["".concat(s,".").concat(d)]||c[d]||h[d]||o;return r?a.createElement(m,i(i({ref:t},p),{},{components:r})):a.createElement(m,i({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},9074:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],l={title:"Subgraph",sidebar_position:6},s="Augur Subgraph",u={unversionedId:"turbo/subgraph",id:"turbo/subgraph",isDocsHomePage:!1,title:"Subgraph",description:"A subgraph is an open API, built on top of The Graph, that indexes",source:"@site/docs/turbo/subgraph.md",sourceDirName:"turbo",slug:"/turbo/subgraph",permalink:"/turbo/subgraph",editUrl:"https://github.com/AugurProject/docs/edit/master/docs/turbo/subgraph.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Subgraph",sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Hardhat Tasks",permalink:"/turbo/hardhat-tasks"}},p=[{value:"Available Subgraphs",id:"available-subgraphs",children:[],level:2},{value:"How to deploy",id:"how-to-deploy",children:[],level:2},{value:"Example queries",id:"example-queries",children:[{value:"Markets&#39; transactions",id:"markets-transactions",children:[],level:3},{value:"Markets&#39; details",id:"markets-details",children:[],level:3},{value:"Total volume per day",id:"total-volume-per-day",children:[],level:3},{value:"Total volume per market, per day",id:"total-volume-per-market-per-day",children:[],level:3}],level:2},{value:"Filtering",id:"filtering",children:[],level:2},{value:"Pagination",id:"pagination",children:[],level:2}],h={toc:p};function c(e){var t=e.components,r=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"augur-subgraph"},"Augur Subgraph"),(0,o.kt)("p",null,"A subgraph is an open API, built on top of ",(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/en/"},"The Graph"),", that indexes\nand organize blockchain data, making it accessible via ",(0,o.kt)("a",{parentName:"p",href:"https://graphql.org/learn/"},"GraphQL"),",\nwhich is a query language for APIs."),(0,o.kt)("p",null,"Our subgraph is being used on both Augur Turbo and Augur Sportsbook. It's currently indexing\nAugur's markets, trades, addition and removal of liquidity and also positions."),(0,o.kt)("h2",{id:"available-subgraphs"},"Available Subgraphs"),(0,o.kt)("p",null,"There are two main subgraphs that we use. Matic is our live subgraph, used for production, and\nMumbai is our test subgraph, used by developers."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/hosted-service/subgraph/augurproject/augur-turbo-matic"},"Matic")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/hosted-service/subgraph/augurproject/augur-turbo-mumbai"},"Mumbai")),(0,o.kt)("p",null,"There's also a subgraph for staging, which is a mirror of our production subgraph,\nand demo."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/hosted-service/subgraph/augurproject/augur-turbo-matic-staging"},"Matic Staging")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/hosted-service/subgraph/augurproject/augur-turbo-demo-mumbai"},"Mumbai Demo")),(0,o.kt)("h2",{id:"how-to-deploy"},"How to deploy"),(0,o.kt)("p",null,"For information on how to deploy, please check out ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/AugurProject/turbo/tree/dev/packages/subgraph"},"Augur's Subgraph GitHub repository"),"."),(0,o.kt)("h2",{id:"example-queries"},"Example queries"),(0,o.kt)("h3",{id:"markets-transactions"},"Markets' transactions"),(0,o.kt)("p",null,"Trades and shares for all markets, as well as liquidity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  markets {\n    trades {\n      collateralBigDecimal\n      sharesBigDecimal\n    }\n    liquidity {\n      collateralBigDecimal\n      sharesReturned\n    }\n  }\n}\n")),(0,o.kt)("h3",{id:"markets-details"},"Markets' details"),(0,o.kt)("p",null,"To fetch market details (such as team/fighter names), you need to pick the market entity that you want.\nInstead of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Markets")," entity, you can choose - at the time of this writing - the following markets:\n",(0,o.kt)("inlineCode",{parentName:"p"},"CryptoMarket, MlbMarket, MmaMarket, NbaMarket, NflMarket"),"."),(0,o.kt)("p",null,"Each one of those have different fields. You can click the entity in the schema section to the right,\nin the playground, to see the fields."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  mmaMarkets {\n    marketFactory\n    marketIndex\n    homeFighterName\n    awayFighterName\n    winner\n  }\n}\n")),(0,o.kt)("h3",{id:"total-volume-per-day"},"Total volume per day"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  totalVolumePerDays {\n    id # The ID is the date in the format YYYY-MM-DD\n    totalVolumeFromTrades\n    totalVolumeFromLiquidity\n  }\n}\n")),(0,o.kt)("h3",{id:"total-volume-per-market-per-day"},"Total volume per market, per day"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  totalVolumePerDaysPerMarket {\n    id # The ID is the date in the format YYYY-MM-DD-marketFactory-marketIndex\n    totalVolumeFromTrades\n    totalVolumeFromLiquidity\n  }\n}\n")),(0,o.kt)("h2",{id:"filtering"},"Filtering"),(0,o.kt)("p",null,"Here's an example of how to filter for specific information using GraphQL. You can find a more in depth\ndocumentation, please check out ",(0,o.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/developer/graphql-api"},"TheGraph's GraphQL API section"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  markets(where: {\n    marketFactory: "0x00", # Filters by this market factory\n    marketIndex: "0" # Filters by this market index\n  }) {\n    trades(where: {\n      sender: "0x00" # Filters by this user\'s address - HAS TO BE LOWERCASED\n    }) {\n      collateralBigDecimal\n      sharesBigDecimal\n    }\n    liquidity(where: {\n      sender: "0x00" # Filters by this user\'s address - HAS TO BE LOWERCASED\n    }) {\n      collateralBigDecimal\n      sharesReturned\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"pagination"},"Pagination"),(0,o.kt)("p",null,"By default, the subgraph playground will fetch the first 100 items. In order to make use of the\npagination system, you need to add the keywords ",(0,o.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"skip"),", as listed in the example below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"# Fetches the first 10 markets.\n{\n  markets(first: 10) {\n    id\n  }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"# Fetches 10 markets with an offset of 100,\n# meaning you're fetching the register 101 all the way up to 110.\n{\n  markets(first: 10, skip: 100) {\n    id\n  }\n}\n")))}c.isMDXComponent=!0}}]);